#!/bin/bash

url=$(git config --get remote.origin.url)
name=$(git config --get user.name)
email=$(git config --get user.email)
branch=$(git rev-parse --abbrev-ref HEAD)
repository=$(git config --get remote.origin.url | sed 's/.*\:\(.*\)\.git/\1/' | grep -o -E '(\w+\/\w+)$')

# check url if http
if [[ $url =~ ^http:// ]]; then
    echo ""
    echo "⚠️ Oops... necesitas que el remote origin de tu proyecto sea con ssh"
    echo ""
    read -p '¿Quieres que lo pasemos a ssh? (y/n): ' aswer
    echo ""
    if [ $aswer == "y" ]; then
        git remote remove origin
        git remote add origin git@github.com:$repository.git
    else
        echo "👇️ Puedes intentar hacerlo manualmente:"
        echo "----------------------------------------"
        echo "git remote remove origin"
        echo "git remote add origin git@github.com:$repository.git"
        echo ""
        exit 1
    fi
fi

if [ ! -d $PWD/.doravel ]; then
    mkdir $PWD/.doravel
fi
if [ ! -d $PWD/.doravel/.ssh ]; then
    mkdir $PWD/.doravel/.ssh
fi
if [ ! -f $PWD/.doravel/.ssh/id_rsa ]; then
    ssh-keygen -t rsa -b 4096 -C "$email" -f $PWD/.doravel/.ssh/id_rsa -q -N ""
fi

echo ""
echo "### SSH key generated ###"
echo ""
cat $PWD/.doravel/.ssh/id_rsa.pub
echo ""
echo ""
echo "⚠️⚠️ IMPORTANTE ⚠️⚠️"
echo "No olvide agregar la clave pública a su repositorio de GitHub!"
echo "👇️ Deploy keys 👇️"
echo "https://docs.github.com/es/developers/overview/managing-deploy-keys#deploy-keys"
echo ""

RSA_KEY=$(cat $PWD/.doravel/.ssh/id_rsa | base64 --wrap=0)
RSA_PUB=$(cat $PWD/.doravel/.ssh/id_rsa.pub | base64 --wrap=0)

ENV_SERVER='
GIT_NAME="'$name'"
GIT_EMAIL="'$email'"
GIT_BRANCH="'$branch'"
GIT_REPOSITORY="'$repository'"'
echo "$ENV_SERVER" > $PWD/.doravel/.env

DOCKER_COMPOSE_CONTENT=$(echo 'version: "3"
services:
    doravel:
        restart: always
        env_file:
            - .doravel/.env
        image: byancode/doravel
        environment:
            - OPCACHE_ENABLE=1
        volumes:
            - $HOME/.ssh:/root/.ssh
            - .:/var/www
        ports:
            - 80:80
            - 443:443
        networks:
            - default
    mysql:
        restart: always
        image: mariadb:latest
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_USER: $DB_USERNAME
            MYSQL_DATABASE: $DB_DATABASE
            MYSQL_PASSWORD: $DB_PASSWORD
        expose:
            - 3306
        volumes:
            - database:/var/lib/mysql
        networks:
            - default
networks:
    default:
        driver: bridge
volumes:
    database:
' | base64 --wrap=0)

if [ -f $PWD/docker-compose.yml ] && [ ! -f $PWD/docker-compose.old.yml ]; then
    cp $PWD/docker-compose.yml $PWD/docker-compose.old.yml
fi

RESPOSE='y'

if [ -f $PWD/docker-compose.yml ]; then
    read -p '¿Desea sobreescribir el archivo docker-compose.yml? (y/n): ' RESPOSE
fi

if [ "$RESPOSE" == 'y' ]; then
    echo $DOCKER_COMPOSE_CONTENT | base64 -d > $PWD/docker-compose.yml
fi

echo '#!/bin/bash
SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
export BASE_PATH=`dirname $SCRIPT_PATH`
docker-compose --project-directory=$BASE_PATH --env-file=$BASE_PATH/.env up -d' > $PWD/.doravel/start

echo '#!/bin/bash
SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
export BASE_PATH=`dirname $SCRIPT_PATH`
chown -R $(id -u):$(id -g) $BASE_PATH/storage
chown -R $(id -u):$(id -g) $BASE_PATH/bootstrap/cache' > $PWD/.doravel/fix

echo '#!/bin/bash
SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
export BASE_PATH=`dirname $SCRIPT_PATH`
docker-compose --project-directory=$BASE_PATH down' > $PWD/.doravel/stop

echo '#!/bin/bash
SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
export BASE_PATH=`dirname $SCRIPT_PATH`
docker-compose --project-directory=$BASE_PATH restart -- doravel' > $PWD/.doravel/restart

echo '#!/bin/bash
SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
export BASE_PATH=`dirname $SCRIPT_PATH`
docker-compose --project-directory=$BASE_PATH exec -- doravel php artisan octane:reload' > $PWD/.doravel/reload

chmod +x $PWD/.doravel/restart
chmod +x $PWD/.doravel/reload
chmod +x $PWD/.doravel/start
chmod +x $PWD/.doravel/stop

credits='desarrollado por: (Byancode S.A.C) byancode@gmail.com'
script='#!/bin/bash

sudo dnf -y install dnf-plugins-core git spwan expect
sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf -y install docker-ce docker-ce-cli containerd.io

sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&  chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

git config --global user.name "'$name'"
git config --global user.email "'$email'"

echo "'$RSA_KEY'" | base64 -d > $HOME/.ssh/id_rsa
echo "'$RSA_PUB'" | base64 -d > $HOME/.ssh/id_rsa.pub

chmod 600 $HOME/.ssh/id_rsa

sudo systemctl start docker

LANG=en_US
tmpfile=$(mktemp)
echo "#!/usr/bin/env expect
set timeout -1

spawn git clone --branch='$branch' git@github.com:'$repository'.git .
expect \"Are you sure you want to continue connecting\"
send \"yes\r\"

expect eof" > $tmpfile
chmod +x $tmpfile
$tmpfile

bash .doravel/start

echo ""
echo "👇️👇️👇️👇️👇️👇️"
echo "'$credits'"
echo ""
'
script=$(echo "$script" | base64 --wrap=0)
echo "# $credits
# copiar todo y pegar en la terminal de linux de tu servidor
mkdir -p /www && cd /www && bash <(echo '$script' | base64 -d)" > $PWD/.doravel/install.sh