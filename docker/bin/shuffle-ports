#!/bin/bash

# Constants
readonly SCRIPT_NAME=$(basename "$0")
readonly MIN_PORT=2000
readonly MAX_PORT=9999

ENV_NAME="${APP_ENV:-local}"

log_error() {
    gum log --time rfc822 --level error "$1"
}

log_info() {
    gum log --time rfc822 --level info "$1"
}

parse_cli_options() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -e|--env)
                ENV_NAME=$2
                shift 2
                ;;
            -h|--help)
                echo "Usage: $SCRIPT_NAME [OPTIONS]"
                echo "Options:"
                echo "  -e, --env ENV_NAME  Environment name (default: $DEFAULT_ENV)"
                echo "  -h, --help          Show this help message and exit"
                exit 0
                ;;
            *)
                log_error "Invalid option: $1"
                exit 1
                ;;
        esac
    done
}

parse_cli_options "$@"

ENV_FILE=$(get_env_file "$ENV_NAME")
DOCKERFILE=$(get_dockerfile "$ENV_NAME")
DOCKER_COMPOSE_FILE=$(get_docker_compose_file "$ENV_NAME")

if [ ! -f "$ENV_FILE" ]; then
    log_error "Environment file not found: $ENV_FILE"
    exit 1
fi

if [ ! -f "$DOCKERFILE" ]; then
    log_error "Dockerfile not found: $DOCKERFILE"
    exit 1
fi

if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
    log_error "Docker Compose file not found: $DOCKER_COMPOSE_FILE"
    exit 1
fi

for RAW_PORT in $(cat "$DOCKER_COMPOSE_FILE" | yq '.services.*.ports[]'); do
    if [[ ! "$RAW_PORT" =~ ^\$\{?([[:alnum:]_]+_PORT) ]]; then
        continue
    fi
    VAR_NAME="${BASH_REMATCH[1]}"
    NEW_PORT=$(shuf -i $MIN_PORT-$MAX_PORT -n 1)
    sed -i "s/$VAR_NAME=[0-9]*/$VAR_NAME=$NEW_PORT/" "$ENV_FILE"
    log_info "Replaced $VAR_NAME=$NEW_PORT"
done