#!/bin/bash


ENDPOINT="https://raw.githubusercontent.com/byancode/doravel/main"
bash <(curl -s $ENDPOINT/scripts/install)

GIT_URL=$(git config --get remote.origin.url)
GIT_NAME=$(git config --get user.name)
GIT_EMAIL=$(git config --get user.email)
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
GIT_REPOSITORY=$(git config --get remote.origin.url | sed 's/.*\/\([^ ]*\/[^.]*\)\.git/\1/')

if [ -z "$GIT_REPOSITORY" ] && [ ! -z "$GIT_URL" ]; then
    GIT_REPOSITORY=$(echo $GIT_URL | sed 's/.*\:\(.*\)\.git/\1/' | grep -o -E '(\w+\/\w+)$')
fi

if [ -z "$GIT_REPOSITORY" ]; then
    read -p "Ingrese el nombre del repositorio: " GIT_REPOSITORY
    # validamos con regexp si el nombre del repositorio es correcto
    if [[ ! $GIT_REPOSITORY =~ ^[a-zA-Z0-9_-]+\/[a-zA-Z0-9_-]+$ ]]; then
        echo "El nombre del repositorio no es correcto"
        exit 1
    fi
fi

if [ -z "$GIT_BRANCH" ]; then
    read -p "Ingrese el nombre del branch: " GIT_BRANCH
    # validamos con regexp si el nombre del repositorio es correcto
    if [[ ! $GIT_BRANCH =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "El nombre del branch no es correcto"
        exit 1
    fi
fi

if [ -z "$GIT_NAME" ]; then
    read -p "Ingrese su nombre: " GIT_NAME
    if [ -z "$GIT_NAME" ]; then
        echo "El nombre no puede estar vacio"
        exit 1
    fi
fi

if [ -z "$GIT_EMAIL" ]; then
    read -p "Ingrese su email: " GIT_EMAIL
    if [[ ! $GIT_EMAIL =~ ^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]]; then
        echo "El email no es correcto"
        exit 1
    fi
fi

if [[ $GIT_URL =~ ^http:// ]]; then
    echo ""
    echo "⚠️ Oops... necesitas que el remote origin de tu proyecto sea con ssh"
    echo ""
    exit 1
fi

if [ ! -f ./storage/.ssh/id_rsa ]; then
    ssh-keygen -t rsa -b 4096 -C "$email" -f ./storage/.ssh/id_rsa -q -N ""
    chmod 600 ./storage/.ssh/id_rsa
fi

echo ""
echo "##🔑 SSH key generated 🔑##"
echo ""
cat ./storage/.ssh/id_rsa.pub
echo ""
echo ""
echo "⚠️⚠️ IMPORTANTE ⚠️⚠️"
echo "No olvide agregar la clave pública a su repositorio de GitHub!"
echo "👇️ Documentacion de DEPLOY KEYS 👇️"
echo ""
echo "https://docs.github.com/es/developers/overview/managing-deploy-keys#deploy-keys"
echo ""

RSA_KEY=$(cat ./storage/.ssh/id_rsa | base64 --wrap=0)
RSA_PUB=$(cat ./storage/.ssh/id_rsa.pub | base64 --wrap=0)

curl -O ${ENDPOINT}/stubs/deploy

sed -e 's~__RSA_KEY__~'$RSA_KEY'~' -i ./deploy
sed -e 's~__RSA_PUB__~'$RSA_PUB'~' -i ./deploy
sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./deploy
sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./deploy
sed -e 's~__GIT_BRANCH__~'$GIT_BRANCH'~' -i ./deploy
sed -e 's~__GIT_REPOSITORY__~'$GIT_REPOSITORY'~' -i ./deploy

chmod +x ./deploy

bash <(curl -s $ENDPOINT/scripts/init)

sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./Dockerfile
sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./Dockerfile

if [ -f ./Dockerfile.main ]; then
    sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./Dockerfile.main
    sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./Dockerfile.main
fi

if [ -f ./Dockerfile.prod ]; then
    sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./Dockerfile.prod
    sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./Dockerfile.prod
fi

if [ -f ./Dockerfile.test ]; then
    sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./Dockerfile.test
    sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./Dockerfile.test
fi

if [ -f ./Dockerfile.dev ]; then
    sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./Dockerfile.dev
    sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./Dockerfile.dev
fi

if [ -f ./Dockerfile.local ]; then
    sed -e 's~__GIT_NAME__~'$GIT_NAME'~' -i ./Dockerfile.local
    sed -e 's~__GIT_EMAIL__~'$GIT_EMAIL'~' -i ./Dockerfile.local
fi