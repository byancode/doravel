#!/bin/bash

function print_help {
    echo '
DORAVEL COMMANDS:

Usage: doravel COMMAND [OPTIONS]

Commands:
    x                  Ejecuta un comando en una imagen aislada de doravel
    sh, ash, bash      Abre la terminal de doravel
    fix                Corrige los permisos de los archivos
    php                Ejecuta un comando php en el contenedor de doravel
    npm                Ejecuta un comando npm en el contenedor de doravel
    node               Ejecuta un comando node en el contenedor de doravel
    test               Inicia el entorno de pruebas
    debug              Inicia el entorno de desarrollo
    deploy             Inicia el entorno de produccion
    tinker             Abre el terminal tinker de laravel
    artisan            Ejecuta un comando artisan
    composer           Ejecuta un comando composer
    supervisorctl      Ejecuta un comando supervisorctl
    timestamp          Estable el timestamp en el archivo .env
    upgrade            Actualiza doravel a la ultima version globalmente
    update             Actualiza doravel a la ultima version en el proyecto

Run "doravel COMMAND --help" for more information on a command.

--------------------------------------------

DOCKER COMPOSE COMMANDS:
    '"$(docker compose --help)"'
'
}

ENDPOINT="https://raw.githubusercontent.com/byancode/doravel/develop"

if [ "$1" == "" ]; then
    print_help
    exit 0
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    exit 0
fi

IS_SUBCOMMAND=0

ENV_DEFAULT="local"
ENV_NAME="$ENV_DEFAULT"
ENV_FILE=".env"
DOCKER_COMPOSE_NAME="docker-compose"
DOCKER_FILE="Dockerfile"
COMMAND="$1"

IFS=$'\n' read -r -d '' -a COMMANDS_DOCKER_COMPOSE <<< "$(docker compose --help | awk '/^Commands:/ {flag=1; next} /^Options:/ {flag=0} /^Run/ {exit} flag {print $1}')"

COMMANDS_BIN=(
    "artisan" "composer" "node" "npm" "php"
    "bash" "ash" "sh" "htop"
)

COMMANDS_ARTISAN=(
    "tinker" "test" "migrate"
)

COMMANDS_ENVIRONMENT=(
    "${COMMANDS_ARTISAN[@]}"
    "${COMMANDS_BIN[@]}"
    "supervisorctl"
    "timestamp"
    "compose"
    "destroy"
    "reload"
    "deploy"
    "debug"
    "ports"
    "init"
)

COMMANDS_DORAVEL=(
    "package"
    "upgrade"
    "update"
    "logout"
    "login"
    "setup"
    "fix"
    "new"
    "x"
)

RESERVED_WORDS=( "test" "init" "debug" "deploy" )

COMMANDS=( "${COMMANDS_DOCKER_COMPOSE[@]}" "${COMMANDS_ENVIRONMENT[@]}" "${COMMANDS_DORAVEL[@]}" )

if [ ! -z "$2" ] && [[ " ${COMMANDS[@]} " =~ " $2 " ]]; then
    if [[ " ${RESERVED_WORDS[@]} " =~ " $1 " ]]; then
        COMMAND="$2"
        ENV_NAME="$1"
        ENV_FILE=".env.$1"
        IS_SUBCOMMAND=1
        shift 2
    elif [[ ! " ${COMMANDS[@]} " =~ " $1 " ]]; then
        COMMAND="$2"
        ENV_NAME="$1"
        ENV_FILE=".env.$1"
        IS_SUBCOMMAND=1
        shift 2
    fi
fi

if [ $IS_SUBCOMMAND -eq 0 ]; then
    shift
fi

if [[ ! " ${COMMANDS[@]} " =~ " $COMMAND " ]]; then
    echo "Command not found"
    exit 0
fi

ENV_NAME=$(sed 's/\*$//g' <<< "$ENV_NAME")
ENV_FILE=$(find . -maxdepth 1 -name "$ENV_FILE" | head -n 1)

if [[ $ENV_NAME == *"*"* ]]; then
    echo "Environment name can't contain *"
    exit 0
fi

if [ ! -z "$ENV_FILE" ]; then
    ENV_NAME=$(echo $(basename $ENV_FILE) | sed 's/\.env//g' | sed 's/^\.//g')
    if [ -z "$ENV_NAME" ]; then
        ENV_NAME="$ENV_DEFAULT"
        DOCKER_FILE="Dockerfile"
        DOCKER_COMPOSE_NAME="docker-compose"
    else
        DOCKER_FILE="Dockerfile.$ENV_NAME"
        DOCKER_COMPOSE_NAME="docker-compose.$ENV_NAME"
    fi
elif [ "$ENV_NAME" != "$ENV_DEFAULT" ]; then
    ENV_FILE=".env.$ENV_NAME"
    DOCKER_FILE="Dockerfile.$ENV_NAME"
    DOCKER_COMPOSE_NAME="docker-compose.$ENV_NAME"
else
    ENV_FILE=".env"
    DOCKER_FILE="Dockerfile"
    DOCKER_COMPOSE_NAME="docker-compose"
fi

COMMAND_DOCKER_COMPOSE=$(echo " ${COMMANDS_DOCKER_COMPOSE[@]} " | grep -o " $COMMAND " | xargs)
COMMAND_ENVIRONMENT=$(echo " ${COMMANDS_ENVIRONMENT[@]} " | grep -o " $COMMAND " | xargs)
COMMAND_DORAVEL=$(echo " ${COMMANDS_DORAVEL[@]} " | grep -o " $COMMAND " | xargs)
DORAVEL_IMAGE=$(cat "$DOCKER_FILE" | grep "FROM" | awk '{print $2}')

echo "Command: $COMMAND"
echo "Environment: $ENV_NAME"

if [ ! -z "$COMMAND_DORAVEL" ] && [ $IS_SUBCOMMAND -eq 1 ]; then
    echo "Command not found"
    exit 0
fi

if [ ! -z "$COMMAND_DORAVEL" ]; then
    echo "Command doravel"
    if [ "$COMMAND_DORAVEL" == 'fix' ]; then
        if [ -d "./bootstrap" ]; then
            sudo chown -R $(id -un):$(id -gn) ./bootstrap/cache
        fi
        if [ -d "./storage" ]; then
            sudo chown -R $(id -un):$(id -gn) ./storage
        fi
        if [ -d "./bootstrap" ] || [ -d "./storage" ]; then
            echo "Permissions fixed 😃"
        else
            echo "No bootstrap or storage directories found"
        fi
    elif [ "$COMMAND_DORAVEL" == 'setup' ]; then
        if [ $DOCKER_CONTAINER -eq 1 ]; then
            if [ ! -f ".env" ] && [ -f ".env.example" ]; then
                cp .env.example .env
            fi
            if [ ! -d "./.doravel" ]; then
                mkdir .doravel
                cp /root/.doravel/* .doravel
            else
                gum confirm "Do you want to overwrite the .doravel directory?" || exit 0
                cp -fr /root/.doravel/* .doravel
            fi
            touch database/database.sqlite
            npm install || exit 1
            composer install || exit 1
            artisan key:generate || exit 1
            artisan storage:link || exit 1
            doravel local init
        else
            doravel x doravel setup
        fi
        exit 0
    elif [ "$COMMAND_DORAVEL" == 'new' ]; then
        if [ -z "$1" ]; then
            echo "Project directory is required"
            exit 1
        fi
        DIRECTORY=$1
        shift
        if [ "$DIRECTORY" != '.' ] && [ -d "$DIRECTORY" ]; then
            echo "Directory $DIRECTORY already exists"
            exit 1
        fi
        docker run --rm -it -v .:/var/www $DORAVEL_IMAGE composer create-project laravel/laravel $DIRECTORY $@
        exit $?
        if [  "$DIRECTORY" != '.' ]; then
            cd $DIRECTORY
        fi
        doravel setup
    fi
    exit 0
fi

if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    echo "Command environment"

    if [ "$COMMAND_ENVIRONMENT" == 'init' ]; then
        touch $ENV_FILE
        touch "$DOCKER_COMPOSE_NAME.yaml"
        echo "created environment $ENV_NAME"
        exit 0
    elif [ "$COMMAND_ENVIRONMENT" == "destroy" ]; then
        rm -f $ENV_FILE
        rm -f "$DOCKER_COMPOSE_NAME.yaml"
        echo "destroyed environment $ENV_NAME"
        exit 0
    fi
fi

if [ ! -f $ENV_FILE ]; then
    echo "the $ENV_FILE file does not exist"
    exit 0
fi

DIR_NAME=$(basename $(pwd))
PROJECT_NAME=$(echo $DIR_NAME | sed 's/[^a-zA-Z0-9]/-/g')
PROJECT_NAME="${PROJECT_NAME}__${ENV_NAME}"

DOCKER_CONTAINER=${DORAVEL_CONTAINER:-0}
DOCKER_COMPOSE_FILE=$(find . -maxdepth 1 -name "$DOCKER_COMPOSE_NAME.y*" | head -n 1)

if [ -z "$DOCKER_COMPOSE_FILE" ]; then
    echo "the ./$DOCKER_COMPOSE_NAME.yaml file does not exist"
    exit 0
fi

DOCKER_COMPOSE="docker compose --project-name $PROJECT_NAME --env-file $ENV_FILE --file $DOCKER_COMPOSE_FILE"

container_exec() {
    if ! $DOCKER_COMPOSE ps --services --status running | grep -q "app"; then
        echo "Service 'app' is not running"
        exit 1
    else
         $DOCKER_COMPOSE exec app $@
    fi
}

supervisorctl_exec() {
    if [ $DOCKER_CONTAINER -eq 1 ]; then
        EXECUTABLE="supervisorctl --configuration /etc/supervisord.conf"
        COMMANDS=( "start" "stop" "restart" "status" "reload" "remove" "enable" "disable" )

        COMMAND="$1"
        shift

        if [ -z "$COMMAND" ] || [[ ! " ${COMMANDS[@]} " =~ " $COMMAND " ]]; then
            $EXECUTABLE $@
        fi

        VALUE="$1"
        shift

        if [ -z "$VALUE" ]; then
            $EXECUTABLE $COMMAND
        elif [ "$VALUE" == "all" ]; then
            $EXECUTABLE $COMMAND $VALUE
        else
            $EXECUTABLE $COMMAND $($EXECUTABLE status | sed -n "/$VALUE/p" | awk '{print $1}')
        fi

        $EXECUTABLE $@
    else
        container_exec doravel supervisorctl $@
    fi
}

docker_ports() {
    LINES=$($DOCKER_COMPOSE ps --status running --format json | jq '.Service + "|" + .Ports')
    while IFS= read -r LINE; do
        SERVICE=$(echo $LINE | cut -d"|" -f1 | cut -d'"' -f2)
        PORTS=$(echo $LINE | grep -oP ':::\K\d+(?=-)')

        if [ "$PORTS" == "" ]; then
            continue
        fi

        JOINED_PORTS=$(echo $PORTS | tr '\n' ' ' | sed 's/ /,/g' | sed 's/,$//')

        echo -e "$SERVICE:$JOINED_PORTS"
    done <<< "$LINES"
}

docker_find_ports() {
    echo $(docker_ports) | tr ' ' '\n' | grep "$1"
}

docker_print_ports() {
    REMOTE_IP="$1"
    LOCAL_IP="$2"
    LINE="$3"

    SERVICE=$(echo $LINE | cut -d":" -f1)
    PORTS=$(echo $LINE | cut -d":" -f2 | tr ',' '\n')

    if [ "$PORTS" == "" ]; then
        echo ""
        exit 0
    fi

    for PORT in $PORTS; do
        echo -e "\n$SERVICE [$PORT]:"
        echo -e "  🌐  http://$REMOTE_IP:$PORT"
        echo -e "  🏠  http://$LOCAL_IP:$PORT"
        echo -e "  💻  http://localhost:$PORT"
        echo -e "---"
    done
}

if [ ! -z "$COMMAND_DOCKER_COMPOSE" ]; then
    $DOCKER_COMPOSE $COMMAND_DOCKER_COMPOSE $@;
    exit 0
fi

if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    if [ "$COMMAND_ENVIRONMENT" == "compose" ]; then
        $DOCKER_COMPOSE $@;
        exit 0
    elif [ "$COMMAND_ENVIRONMENT" == "ports" ]; then
        SERVICES=$($DOCKER_COMPOSE ps --status running --services | tr '\n' ' ')
        REMOTE_IP=$(curl -s https://checkip.amazonaws.com/)
        LOCAL_IP=$(hostname -I | cut -d" " -f1)

        if [ -z "$1" ]; then
            echo "Usage: doravel ports [list|show|shuffle]"
            exit 0
        fi

        if [ "$1" == "list" ]; then
            LINES=$(echo $(docker_ports) | tr ' ' '\n')

            for LINE in $LINES; do
                docker_print_ports "$REMOTE_IP" "$LOCAL_IP" "$LINE"
            done
            exit 0
        elif [ "$1" == "shuffle" ]; then
            if [ $DOCKER_CONTAINER -eq 1 ]; then
                shuffle-ports --env $ENV_NAME
            else
                docker run --rm -it -v .:/var/www $DORAVEL_IMAGE shuffle-ports --env $ENV_NAME
            fi
            exit 0
        elif [ "$1" == "show" ]; then
            shift 1
            ARGUMENTS=$(echo "$@" | sed 's/^ +| +$//' | tr ' ' '\n')
            if [ -z "$ARGUMENTS" ]; then
                echo "No services provided"
                exit 1
            fi
            for SERVICE in $ARGUMENTS; do
                LINE=$(docker_find_ports "$SERVICE")
                if [ -z "$LINE" ]; then
                    continue
                fi
                docker_print_ports "$REMOTE_IP" "$LOCAL_IP" "$LINE"
            done
            exit 0
        else
            echo "Service $1 not found"
            exit 1
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "reload" ]; then
        supervisorctl_exec reload
        supervisorctl_exec restart all
        exit $?
    elif [ "$COMMAND_ENVIRONMENT" == "supervisorctl" ]; then
        supervisorctl_exec $@
        exit $?
    elif [[ " ${COMMANDS_ARTISAN[@]} " =~ " $COMMAND_ENVIRONMENT " ]]; then
        if [ $DOCKER_CONTAINER -eq 1 ]; then
            artisan $COMMAND_ENVIRONMENT $@
        else
            container_exec artisan $COMMAND_ENVIRONMENT $@
        fi
        exit 0
    elif [[ " ${COMMANDS_BIN[@]} " =~ " $COMMAND_ENVIRONMENT " ]]; then
        if [ $DOCKER_CONTAINER -eq 1 ]; then
            $COMMAND_ENVIRONMENT $@
        else
            container_exec $COMMAND_ENVIRONMENT $@
        fi
        exit 0
    elif [ "$COMMAND_ENVIRONMENT" == "timestamp" ]; then
        TIMESPAMP=$(date -u +%Y-%m-%d\T%H:%M:%S)
        sed -i "s/DOCKER_IMAGE_UPDATED_AT=.*/DOCKER_IMAGE_UPDATED_AT=$TIMESPAMP/" $ENV_FILE
        echo "Timestamp set to $ENV_FILE 😃"
        exit 0
    fi
fi
