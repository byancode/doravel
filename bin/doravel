#!/bin/bash

function print_help {
    echo 'Modo de uso: doravel [COMMAND] [OPTIONS]

DORAVEL COMMANDS:
    sh                 Abre el terminal sh de doravel
    fix                Corrige los permisos de los archivos
    init               Inicia un proyecto con doravel
    bash               Abre el terminal bash|sh de doravel
    reload             Reinicia el contenedor de laravel
    server             Inicia el servidor con doravel
    artisan            Ejecuta un comando artisan
    global             Instala el comando doravel globalmente
    upgrade            Actualiza doravel
    ssh-keys           Genera las llaves ssh para el deploy

DOCKER-COMPOSE COMMANDS:
    build              Build or rebuild services
    config             Validate and view the Compose file
    create             Create services
    down               Stop and remove resources
    events             Receive real time events from containers
    exec               Execute a command in a running container
    help               Get help on a command
    images             List images
    kill               Kill containers
    logs               View output from containers
    pause              Pause services
    port               Print the public port for a port binding
    ps                 List containers
    pull               Pull service images
    push               Push service images
    restart            Restart services
    rm                 Remove stopped containers
    run                Run a one-off command
    scale              Set number of containers for a service
    start              Start services
    stop               Stop services
    top                Display the running processes
    unpause            Unpause services
    up                 Create and start containers
    version            Show version information and quit

OPTIONS:
    -e | --env     .env file to use
    -h | --help    show this help
    -v | --version show version

'
}

ENDPOINT="https://raw.githubusercontent.com/byancode/doravel/main"

if [ "$1" == "" ]; then
    print_help
    exit 0
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    exit 0
fi

COMMAND="$1"

if [ $COMMAND == "init" ]; then
    echo "Initializing doravel..."
    read -p "Do you want to initialize doravel? [y/N] " RESPOSE

    if [ "$RESPOSE" == "y" ]; then
        bash <(curl $ENDPOINT/bin/init)
    fi

    exit 0
fi

if [ $COMMAND == "" ]; then
    echo "Running doravel..."
fi


COMMANDS=(
# doravel commands
    "sh"
    "fix"
    "init"
    "bash"
    "global"
    "server"
    "reload"
    "artisan"
    "upgrade"
    "ssh-keys"
# docker-compose commands
    "build"
    "config"
    "create"
    "down"
    "events"
    "exec"
    "help"
    "images"
    "kill"
    "logs"
    "pause"
    "port"
    "ps"
    "pull"
    "push"
    "restart"
    "rm"
    "run"
    "scale"
    "start"
    "stop"
    "top"
    "unpause"
    "up"
    "version"
)

# compobamos si exite el comando
if [[ " ${COMMANDS[*]} " =~ " ${COMMAND} " ]]; then
    echo "Running doravel with command $COMMAND..."
else
    echo "the command $COMMAND is not valid"
    exit 0
fi

# comandos que no requiere de un .env

if [ $COMMAND == "fix" ]; then
    sudo chown -R $(id -un):$(id -gn) ./bootstrap/cache
    sudo chown -R $(id -un):$(id -gn) ./storage
    echo "Permissions fixed 😃"
    exit 0
fi

if [ $COMMAND == "global" ] || [ $COMMAND == "upgrade" ]; then
    if [ $COMMAND == "upgrade" ]; then
        echo "Upgrading doravel..."
    else
        echo "Installing doravel global..."
    fi

    if [ ! -d ~/bin ]; then
        mkdir ~/bin
    fi

    curl "$ENDPOINT/bin/doravel" -o ~/bin/doravel
    curl "$ENDPOINT/bin/dlocal" -o ~/bin/dlocal
    curl "$ENDPOINT/bin/dtest" -o ~/bin/dtest
    curl "$ENDPOINT/bin/dprod" -o ~/bin/dprod

    chmod +x ~/bin/doravel
    chmod +x ~/bin/dlocal
    chmod +x ~/bin/dtest
    chmod +x ~/bin/dprod

    ln -sf ~/bin/doravel ~/bin/dv

    echo "Doravel installed 😃"
    exit 0
fi

if [ $COMMAND == "ssh-keys" ]; then
    echo "Generating ssh keys..."
    if [ ! -d ./storage/.ssh ]; then
        mkdir ./storage/.ssh
    fi
    email=$(git config --global user.email)
    ssh-keygen -t rsa -b 4096 -C "$email" -f ./storage/.ssh/id_rsa -q -N ""
    chmod 600 ./storage/.ssh/id_rsa

    echo ""
    echo "##🔑 SSH key generated 🔑##"
    echo ""
    cat ./storage/.ssh/id_rsa.pub
    echo ""
    echo ""
    echo "⚠️⚠️ IMPORTANTE ⚠️⚠️"
    echo "No olvide agregar la clave pública a su repositorio de GitHub!"
    echo "👇️ Documentacion de DEPLOY KEYS 👇️"
    echo ""
    echo "https://docs.github.com/es/developers/overview/managing-deploy-keys#deploy-keys"
    echo ""

    exit 0
fi


if [ ! -d "./app" ] || [ ! -f "./.env" ]; then
    echo "the current directory is not a laravel project"
    exit 0
fi
# comandos que requieren de un .env

ENV_FILE=".env"
ENV_NAME="local"
DCP_NAME="docker-compose"

# if [ ! -f "$DCP_NAME.yml" ]; then
#     echo "this project does not have a docker-compose.yml file"
#     exit 1
# fi

OPTIONS=''
while [ "$#" -gt 0 ]; do
    case "$2" in
        -e | --env)
            ENV_NAME="$3"
            ENV_FILE=".env.$ENV_NAME"
            shift 2
            ;;
        --local)
            ENV_NAME="local"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        --test)
            ENV_NAME="test"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        --testing)
            ENV_NAME="testing"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        --dev)
            ENV_NAME="dev"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        --development)
            ENV_NAME="development"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        --prod)
            ENV_NAME="prod"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        --production)
            ENV_NAME="production"
            ENV_FILE=".env.$ENV_NAME"
            shift
            ;;
        *)
            if [[ "$2" == "--" ]] || [[ "$2" =~ ^- ]]; then
                OPTIONS="$OPTIONS $2"
                shift
                continue
            fi
            OPTIONS="$OPTIONS $2"
            shift
            ;;
    esac
done

if [ "$ENV_NAME" == "" ]; then
    ENV_NAME="local"
fi

if ! [[ "$ENV_NAME" =~ ^[a-zA-Z0-9]+$ ]]; then
    echo "the environment name $ENV_NAME is not valid"
    exit 0
fi

if [ -f "./$DCP_NAME.yml" ]; then
    ARGUMENTS="--file=$DCP_NAME.yml"
else
    ARGUMENTS=""
fi

if [ "$ENV_NAME" != "" ]; then
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "testing" ] && [ ! -f "./$ENV_FILE" ] && [ -f "./.env.test" ]; then
    ENV_NAME="test"
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "development" ] && [ ! -f "./$ENV_FILE" ] && [ -f "./.env.dev" ]; then
    ENV_NAME="dev"
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "production" ] && [ ! -f "./$ENV_FILE" ] && [ -f "./.env.prod" ]; then
    ENV_NAME="prod"
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "prod" ] || [ "$ENV_NAME" == "production" ]; then
    if [ ! -f "./$ENV_FILE" ]; then
        ENV_NAME="local"
        ENV_FILE=".env.$ENV_NAME"
        DCP_NAME="docker-compose.$ENV_NAME"
    fi
fi

if [ "$ENV_NAME" != "local" ] && [ ! -f "./$ENV_FILE" ]; then
    echo "the environment file $ENV_FILE does not exist"
    exit 0
fi

if [ "$ENV_NAME" != "local" ] && [ ! -f "./$ENV_FILE" ]; then
    echo "the environment file $ENV_FILE does not exist"
    exit 0
fi

if [ ! -f "./$ENV_FILE" ]; then
    ENV_NAME="local"
    ENV_FILE=".env"
fi

DCP_OVERRIDE="docker-compose.override"

if [ "$ENV_NAME" != "local" ] && [ -f "./$DCP_OVERRIDE.yml" ]; then
    ARGUMENTS="$ARGUMENTS --file=$DCP_OVERRIDE.yml"
fi

if [ -f "./$DCP_NAME.yml" ]; then
    ARGUMENTS="--file=$DCP_NAME.yml $ARGUMENTS"
fi

# get name from this current directory
DIR_NAME=$(basename $(pwd))
PROJECT_NAME=$(echo $DIR_NAME | sed 's/[^a-zA-Z0-9]/-/g')
PROJECT_NAME="${PROJECT_NAME}__${ENV_NAME}"
ARGUMENTS="$ARGUMENTS --project-name=$PROJECT_NAME --env-file=$ENV_FILE"

if ! [ -x "$(command -v docker-compose)" ]; then
    PROGRAM="docker compose"
else
    PROGRAM="docker-compose"
fi

if [ $COMMAND == "bash" ] || [ $COMMAND == "sh" ]; then
    $PROGRAM $(echo $ARGUMENTS) exec -- app $(echo $COMMAND) $(echo $OPTIONS)
    exit 0
fi

if [ $COMMAND == "artisan" ]; then
    $PROGRAM $(echo $ARGUMENTS) exec -- app php artisan $(echo $OPTIONS)
    exit 0
fi

if [ $COMMAND == "reload" ]; then
    $PROGRAM $(echo $ARGUMENTS) restart -- app
    exit 0
fi

$PROGRAM $(echo $ARGUMENTS) $(echo $COMMAND) $(echo $OPTIONS)