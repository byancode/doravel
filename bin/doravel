#!/bin/bash
# --------------------------------------- #
# 🔧   YOU CAN EDIT THE COMPILATION    🔧 #
# --------------------------------------- #
# Example:  latest
#           PHP8.2
#           PHP8.2NODE22.2
#           PHP8.3NGINX1.27
#           PHP8.1NGINX1.27NODE22.2
# --------------------------------------- #

DORAVEL_BUILD="latest"

# --------------------------------------- #
# ❌ DO NOT EDIT ANYTHING FROM HERE ON ❌ #
# --------------------------------------- #

DORAVEL_VERSION="1.0.0"
DORAVEL_ISOLATED=${DORAVEL_ISOLATED:-0}
DORAVEL_CONTAINER=${DORAVEL_CONTAINER:-0}
DORAVEL_INSTALLED=${DORAVEL_INSTALLED:-0}

function print_help {
    echo '
DORAVEL COMMANDS:

Usage: doravel COMMAND [OPTIONS]

Commands:
    x                  Ejecuta un comando en una imagen aislada de doravel
    sh, ash, bash      Abre la terminal de doravel
    fix                Corrige los permisos de los archivos
    php                Ejecuta un comando php en el contenedor de doravel
    npm                Ejecuta un comando npm en el contenedor de doravel
    node               Ejecuta un comando node en el contenedor de doravel
    test               Inicia el entorno de pruebas
    debug              Inicia el entorno de desarrollo
    deploy             Inicia el entorno de produccion
    tinker             Abre el terminal tinker de laravel
    compose            Ejecuta un comando docker compose
    artisan            Ejecuta un comando artisan
    composer           Ejecuta un comando composer
    supervisorctl      Ejecuta un comando supervisorctl
    timestamp          Estable el timestamp en el archivo .env
    upgrade            Actualiza doravel a la ultima version globalmente
    update             Actualiza doravel a la ultima version en el proyecto

Run "doravel COMMAND --help" for more information on a command.

┌──────────────────────────────────────────────────────────────────────────┐
│ IMPORTANT:  DORAVEL IS A SUPERSET OF DOCKER,                             │
│             YOU CAN USE DOCKER COMPOSE COMMANDS                          │
└──────────────────────────────────────────────────────────────────────────┘
'
}

ENDPOINT="https://raw.githubusercontent.com/byancode/doravel/develop"

if [ "$1" == "" ]; then
    print_help
    exit 0
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    exit 0
fi

IS_SUBCOMMAND=0

ENV_DEFAULT="local"
ENV_NAME="$ENV_DEFAULT"
ENV_FILE=".env"
DOCKER_COMPOSE_NAME="docker-compose"
DOCKER_FILE="Dockerfile"
COMMAND="$1"

IFS=$'\n' read -r -d '' -a COMMANDS_DOCKER_COMPOSE <<< "$(docker compose --help | awk '/^Commands:/ {flag=1; next} /^Options:/ {flag=0} /^Run/ {exit} flag {print $1}')"

COMMANDS_BIN=(
    "artisan" "composer" "node" "npm" "php"
    "bash" "ash" "sh" "htop"
)

COMMANDS_ARTISAN=(
    "tinker" "test" "migrate"
)

COMMANDS_ENVIRONMENT=(
    "${COMMANDS_ARTISAN[@]}"
    "${COMMANDS_BIN[@]}"
    "supervisorctl"
    "timestamp"
    "compose"
    "destroy"
    "reload"
    "deploy"
    "debug"
    "ports"
    "init"
)

COMMANDS_DORAVEL=(
    "package"
    "upgrade"
    "install"
    "update"
    "logout"
    "doctor"
    "login"
    "setup"
    "fix"
    "new"
    "x"
)

RESERVED_WORDS=( "test" "init" "debug" "deploy" )

COMMANDS=( "${COMMANDS_DOCKER_COMPOSE[@]}" "${COMMANDS_ENVIRONMENT[@]}" "${COMMANDS_DORAVEL[@]}" )

if [ ! -z "$2" ] && [[ " ${COMMANDS[@]} " =~ " $2 " ]]; then
    if [[ " ${RESERVED_WORDS[@]} " =~ " $1 " ]]; then
        COMMAND="$2"
        ENV_NAME="$1"
        ENV_FILE=".env.$1"
        IS_SUBCOMMAND=1
        shift 2
    elif [[ ! " ${COMMANDS[@]} " =~ " $1 " ]]; then
        COMMAND="$2"
        ENV_NAME="$1"
        ENV_FILE=".env.$1"
        IS_SUBCOMMAND=1
        shift 2
    fi
fi

if [ $IS_SUBCOMMAND -eq 0 ]; then
    shift
fi

if [[ ! " ${COMMANDS[@]} " =~ " $COMMAND " ]]; then
    echo "Command not found"
    exit 0
fi

ENV_NAME=$(sed 's/\*$//g' <<< "$ENV_NAME")
ENV_FILE=$(find . -maxdepth 1 -name "$ENV_FILE" | head -n 1)

if [[ $ENV_NAME == *"*"* ]]; then
    echo "❌ Environment name can't contain *"
    exit 0
fi

if [[ ! $ENV_NAME =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "❌ Environment name not valid"
    exit 0
fi

if [ ! -z "$ENV_FILE" ]; then
    ENV_NAME=$(echo $(basename $ENV_FILE) | sed 's/\.env//g' | sed 's/^\.//g')
    if [ -z "$ENV_NAME" ]; then
        ENV_NAME="$ENV_DEFAULT"
        DOCKER_FILE="Dockerfile"
        DOCKER_COMPOSE_NAME="docker-compose"
    else
        DOCKER_FILE="Dockerfile.$ENV_NAME"
        DOCKER_COMPOSE_NAME="docker-compose.$ENV_NAME"
    fi
elif [ "$ENV_NAME" != "$ENV_DEFAULT" ]; then
    ENV_FILE=".env.$ENV_NAME"
    DOCKER_FILE="Dockerfile.$ENV_NAME"
    DOCKER_COMPOSE_NAME="docker-compose.$ENV_NAME"
else
    ENV_FILE=".env"
    DOCKER_FILE="Dockerfile"
    DOCKER_COMPOSE_NAME="docker-compose"
fi

DOCKER_COMPOSE_FILE=$(find . -maxdepth 1 -name "$DOCKER_COMPOSE_NAME.y*" | head -n 1)
COMMAND_DOCKER_COMPOSE=$(echo " ${COMMANDS_DOCKER_COMPOSE[@]} " | grep -o " $COMMAND " | xargs)
COMMAND_ENVIRONMENT=$(echo " ${COMMANDS_ENVIRONMENT[@]} " | grep -o " $COMMAND " | xargs)
COMMAND_DORAVEL=$(echo " ${COMMANDS_DORAVEL[@]} " | grep -o " $COMMAND " | xargs)
DORAVEL_IMAGE_TAG="${DORAVEL_VERSION}-${DORAVEL_BUILD}"
DORAVEL_IMAGE="byancode/doravel:$DORAVEL_IMAGE_TAG"

doravel_image_run() {
    docker run --rm -it -v .:/var/www $DORAVEL_IMAGE $@
}

recursive_cp() {
    ROOT_PATH=$1
    DEST_PATH=$2
    ORIGIN_PATH=$ROOT_PATH$DEST_PATH

    for FROM_PATH in $(find $ORIGIN_PATH); do
        TARGET_PATH=${FROM_PATH#$ROOT_PATH}
        if [ -d $FROM_PATH ]; then
            mkdir -vp $TARGET_PATH
        elif [ ! -f $TARGET_PATH ]; then
            cp -v $FROM_PATH $TARGET_PATH
        fi
    done
}

echo "Command: $COMMAND"
echo "Environment: $ENV_NAME"

if [ ! -z "$COMMAND_DORAVEL" ] && [ $IS_SUBCOMMAND -eq 1 ]; then
    echo "Command not found"
    exit 0
fi

if [ ! -z "$COMMAND_DORAVEL" ]; then
    echo "Command doravel: $COMMAND_DORAVEL"
    if [ "$COMMAND_DORAVEL" == 'x' ]; then
        VOLUMES=( "-v .:/var/www" )
        DOCKER_SOCKET_FILE="/var/run/docker.sock"
        if [ -S "$DOCKER_SOCKET_FILE" ]; then
            VOLUMES+=( "-v $DOCKER_SOCKET_FILE:$DOCKER_SOCKET_FILE" )
        fi
        docker run --rm -it ${VOLUMES[@]} -e "DORAVEL_ISOLATED=1" $DORAVEL_IMAGE $@
        exit $?
    elif [ "$COMMAND_DORAVEL" == 'fix' ]; then
        if [ -d "./bootstrap" ]; then
            sudo chown -R $(id -un):$(id -gn) ./bootstrap/cache
        fi
        if [ -d "./storage" ]; then
            sudo chown -R $(id -un):$(id -gn) ./storage
        fi
        if [ -d "./bootstrap" ] || [ -d "./storage" ]; then
            echo "Permissions fixed 😃"
        else
            echo "No bootstrap or storage directories found"
        fi
        exit 0
    elif [ "$COMMAND_DORAVEL" == 'doctor' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            STATUS=0
            if [ ! -d .doravel ]; then
                STATUS=1
                echo "❌ Directory .doravel not found"
            else
                echo "✅ Directory .doravel found"
            fi
            if [ ! -d vendor ]; then
                STATUS=1
                echo "❌ Directory vendor not found"
            else
                echo "✅ Directory vendor found"
            fi
            if [ ! -d node_modules ]; then
                STATUS=1
                echo "❌ Directory node_modules not found"
            else
                echo "✅ Directory node_modules found"
            fi

            ENVIRONMENTS=$(find . -maxdepth 1 -name ".env.*" | sed -E 's/^(\.\/)?\.env\.?//g' | sed 's/^$/local/g')
            for ENVIROMENT in $ENVIRONMENTS; do
                DOCKERCOMPOSE_NAME="docker-compose"
                DOCKERFILE_PATH="Dockerfile"
                ENV_PATH=".env"

                if [ "$ENVIROMENT" != "local" ]; then
                    DOCKERCOMPOSE_NAME="docker-compose.$ENVIROMENT"
                    DOCKERFILE_PATH="Dockerfile.$ENVIROMENT"
                    ENV_PATH=".env.$ENVIROMENT"
                fi

                DOCKERCOMPOSE_PATH=$(find . -maxdepth 1 -name "$DOCKERCOMPOSE_NAME.y*ml" | head -n 1)

                if [ -z "$DOCKERCOMPOSE_PATH" ]; then
                    STATUS=1
                    echo "❌ File $DOCKERCOMPOSE_NAME.yaml not found"
                else
                    echo "✅ File $DOCKERCOMPOSE_NAME.yaml found"
                fi

                if [ ! -f "$ENV_PATH" ]; then
                    STATUS=1
                    echo "❌ File $ENV_PATH not found"
                else
                    echo "✅ File $ENV_PATH found"
                fi

                if [ ! -f "$DOCKERFILE_PATH" ]; then
                    STATUS=1
                    echo "❌ File $DOCKERFILE_PATH not found"
                else
                    echo "✅ File $DOCKERFILE_PATH found"
                fi

                if ! grep -qE "APP_ENV(\s+)?=(\s+)?$ENVIROMENT" $ENV_PATH; then
                    STATUS=1
                    echo "❌ APP_ENV=$ENVIROMENT not found in $ENV_PATH"
                else
                    echo "✅ APP_ENV=$ENVIROMENT found in $ENV_PATH"
                fi

                if [ ! -f .doravel/cron/$ENVIROMENT ]; then
                    STATUS=1
                    echo "❌ File .doravel/cron/$ENVIROMENT not found"
                else
                    echo "✅ File .doravel/cron/$ENVIROMENT found"
                fi

                if [ ! -f .doravel/php/$ENVIROMENT.ini ]; then
                    STATUS=1
                    echo "❌ File .doravel/php/$ENVIROMENT.ini not found"
                else
                    echo "✅ File .doravel/php/$ENVIROMENT.ini found"
                fi

                if [ ! -d .doravel/php/$ENVIRONMENT.d ]; then
                    STATUS=1
                    echo "❌ Directory .doravel/php/$ENVIRONMENT.d not found"
                else
                    echo "✅ Directory .doravel/php/$ENVIRONMENT.d found"
                fi

                if [ ! -f .doravel/supervisor/$ENVIROMENT.conf ]; then
                    STATUS=1
                    echo "❌ File .doravel/supervisor/$ENVIROMENT.conf not found"
                else
                    echo "✅ File .doravel/supervisor/$ENVIROMENT.conf found"
                fi

                if [ ! -d .doravel/supervisor/$ENVIRONMENT.d ]; then
                    STATUS=1
                    echo "❌ Directory .doravel/supervisor/$ENVIRONMENT.d not found"
                else
                    echo "✅ Directory .doravel/supervisor/$ENVIRONMENT.d found"
                fi

                if [ ! -f .doravel/nginx/$ENVIROMENT.conf ]; then
                    STATUS=1
                    echo "❌ File .doravel/nginx/$ENVIROMENT.conf not found"
                else
                    echo "✅ File .doravel/nginx/$ENVIROMENT.conf found"
                fi

                if [ ! -d .doravel/nginx/http.d ]; then
                    STATUS=1
                    echo "❌ Directory .doravel/nginx/http.d not found"
                else
                    echo "✅ Directory .doravel/nginx/http.d found"
                fi

                if [ ! -d .doravel/nginx/https.d ]; then
                    STATUS=1
                    echo "❌ Directory .doravel/nginx/https.d not found"
                else
                    echo "✅ Directory .doravel/nginx/https.d found"
                fi
            done
            echo ""
            echo "--------------------------------"
            echo ""
            if [ $STATUS -eq 0 ]; then
                echo "✅ All files and directories found"
            elif gum confirm "👨‍⚕️ do you want to fix it?"; then
                gum spin --spinner dot --title "fixing" -- sleep 3
                doravel fix
                exit $?
            fi

            exit $STATUS
        else
            doravel x doravel doctor
            exit $?
        fi
    elif [ "$COMMAND_DORAVEL" == 'install' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            npm install
            composer install
        else
            doravel x doravel install
        fi
    elif [ "$COMMAND_DORAVEL" == 'setup' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            recursive_cp /root/ .workflows/
            recursive_cp /root/ .workplan/
            recursive_cp /root/ .doravel/
            recursive_cp /root/ .vscode/

            touch database/database.sqlite

            doravel init && \
            doravel example destroy && \
            artisan key:generate && \
            artisan storage:link && \
            doravel install
            exit $?
        else
            doravel x doravel setup
        fi
    elif [ "$COMMAND_DORAVEL" == 'new' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            DIRECTORY=$1
            shift 1

            if [ -z "$DIRECTORY" ]; then
                echo "Project directory is required"
                exit 1
            fi

            if [ "$DIRECTORY" != '.' ] && [ -d "$DIRECTORY" ]; then
                echo "Directory $DIRECTORY already exists"
                exit 1
            fi

            BRANCH="11.x"
            mkdir -p "$DIRECTORY";
            LARAVEL_FILE="$BRANCH.tar.gz"
            LARAVEL_TMP_FILE="/tmp/$LARAVEL_FILE"
            curl -fsSL "https://github.com/laravel/laravel/archive/refs/heads/$LARAVEL_FILE" \
                -o "$LARAVEL_TMP_FILE";
	        tar -xzf "$LARAVEL_TMP_FILE" -C "$DIRECTORY" --strip-components=1;
            rm -f "$LARAVEL_TMP_FILE";

            if [  "$DIRECTORY" != '.'  ]; then
                cd $DIRECTORY
            fi

            doravel setup
            exit 0
        else
            doravel x doravel new $@
            exit 0
        fi
    fi
fi

if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    echo "Command environment"

    if [ "$COMMAND_ENVIRONMENT" == 'init' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            DOCKER_COMPOSE_FILE="$DOCKER_COMPOSE_NAME.yaml"
            STUBS_PATH="/root/.stubs"

            if [ ! -f "$ENV_FILE" ]; then
                cp "$STUBS_PATH/.env" "$ENV_FILE"
            fi
            if [ ! -f "$DOCKER_FILE" ]; then
                cp "$STUBS_PATH/Dockerfile" "$DOCKER_FILE"
            fi
            if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
                cp "$STUBS_PATH/docker-compose.yaml" "$DOCKER_COMPOSE_FILE"
            fi

            DOCKERFILE_NAME=$(basename $DOCKER_FILE)
            FOLDERS=(
                ".doravel/php/$ENV_NAME.d"
                ".doravel/supervisor/$ENV_NAME.d"
            )
            for FOLDER in "${FOLDERS[@]}"; do
                if [ ! -d "$FOLDER" ]; then
                    mkdir -vp "$FOLDER"
                fi
            done
            if [ $DORAVEL_INSTALLED -eq 1 ]; then
                for FOLDER in "${FOLDERS[@]}"; do
                    recursive_cp /root/ $FOLDER/
                done
            fi
            sed -e "s/APP_ENV=.*/APP_ENV=$ENV_NAME/" -i $ENV_FILE
            sed -e "s/APP_ENV=.*/APP_ENV=$ENV_NAME/" -i $DOCKER_FILE
            cp -vf /root/.doravel/cron/local .doravel/cron/$ENV_NAME
            cp -vf /root/.doravel/php/local.ini .doravel/php/$ENV_NAME.ini
            cp -vf /root/.doravel/nginx/local.conf .doravel/nginx/$ENV_NAME.conf
            cp -vf /root/.doravel/supervisor/local.conf .doravel/supervisor/$ENV_NAME.conf
            yq '.services.app.build.dockerfile="'$DOCKERFILE_NAME'", .services.app.environment.APP_ENV="'$ENV_NAME'"' \
                < "$STUBS_PATH/docker-compose.yaml" \
                > "$DOCKER_COMPOSE_FILE";

            echo "created environment $ENV_NAME"
            exit 0
        else
            doravel x doravel init
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "destroy" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            if [ "$ENV_NAME" == "local" ]; then
                gum log --time rfc822 --level fatal "No se puede eliminar el entorno local."
                exit 1
            fi
            if [ "$ENV_NAME" == "$APP_ENV" ] && [ $DORAVEL_ISOLATED -eq 0 ]; then
                gum log --time rfc822 --level fatal "No se puede eliminar el entorno actual."
                exit 1
            fi
            KEYWORD="destroy"
            PASSWORD=$(gum input --placeholder "Escribe '$KEYWORD' para confirmar" --header "Estas seguro de eliminar el entorno ${ENV_NAME}?" --password --header.foreground=190)
            if [ "$PASSWORD" = "$KEYWORD" ]; then
                rm -vf "$ENV_FILE"
                rm -vf "$DOCKER_FILE"
                rm -vf "$DOCKER_COMPOSE_FILE"
                rm -vf ".doravel/cron/$ENV_NAME"
                rm -vf ".doravel/php/$ENV_NAME.ini"
                rm -rf ".doravel/php/$ENV_NAME.d"
                rm -rf ".doravel/nginx/$ENV_NAME.d"
                rm -vf ".doravel/nginx/$ENV_NAME.conf"
                rm -vf ".doravel/supervisor/$ENV_NAME.conf"
                rm -rf ".doravel/supervisor/$ENV_NAME.d"
                echo "👌 destroyed environment $ENV_NAME"
                exit 0
            else
                gum log --time rfc822 --level error "No se ha confirmado la eliminacion."
                echo ""
                if gum confirm "quieres intentar de nuevo?"; then
                    doravel $ENV_NAME destroy
                    exit $?
                fi
                exit 1
            fi
        else
            doravel x doravel $ENV_NAME destroy
            exit $?
        fi
    fi
fi

if [ ! -f "$ENV_FILE" ]; then
    echo "the $ENV_FILE file does not exist"
    exit 0
fi

DIR_NAME=$(basename $(pwd))
PROJECT_NAME=$(echo $DIR_NAME | sed 's/[^a-zA-Z0-9]/-/g')
PROJECT_NAME="${PROJECT_NAME}__${ENV_NAME}"

if [ -z "$DOCKER_COMPOSE_FILE" ]; then
    echo "the $DOCKER_COMPOSE_FILE file does not exist"
    exit 0
fi

DOCKER_COMPOSE="docker compose --project-name $PROJECT_NAME --env-file $ENV_FILE --file $DOCKER_COMPOSE_FILE"

container_exec() {
    if ! $DOCKER_COMPOSE ps --services --status running | grep -q "app"; then
        echo "Service 'app' is not running"
        exit 1
    else
        $DOCKER_COMPOSE exec app $@
        exit $?
    fi
}

supervisorctl_exec() {
    if [ $DORAVEL_CONTAINER -eq 1 ]; then
        EXECUTABLE="supervisorctl --configuration /etc/supervisord.conf"
        COMMANDS=( "start" "stop" "restart" "status" "reload" "remove" "enable" "disable" )

        COMMAND="$1"
        shift

        if [ -z "$COMMAND" ] || [[ ! " ${COMMANDS[@]} " =~ " $COMMAND " ]]; then
            $EXECUTABLE $@
        fi

        VALUE="$1"
        shift

        if [ -z "$VALUE" ]; then
            $EXECUTABLE $COMMAND
        elif [ "$VALUE" == "all" ]; then
            $EXECUTABLE $COMMAND $VALUE
        else
            $EXECUTABLE $COMMAND $($EXECUTABLE status | sed -n "/$VALUE/p" | awk '{print $1}')
        fi

        $EXECUTABLE $@
    else
        container_exec doravel supervisorctl $@
    fi
}

docker_ports() {
    LINES=$($DOCKER_COMPOSE ps --status running --format json | jq '.Service + "|" + .Ports')
    while IFS= read -r LINE; do
        SERVICE=$(echo $LINE | cut -d"|" -f1 | cut -d'"' -f2)
        PORTS=$(echo $LINE | grep -oP ':::\K\d+(?=-)')

        if [ "$PORTS" == "" ]; then
            continue
        fi

        JOINED_PORTS=$(echo $PORTS | tr '\n' ' ' | sed 's/ /,/g' | sed 's/,$//')

        echo -e "$SERVICE:$JOINED_PORTS"
    done <<< "$LINES"
}

docker_find_ports() {
    echo $(docker_ports) | tr ' ' '\n' | grep "$1"
}

docker_print_ports() {
    REMOTE_IP="$1"
    LOCAL_IP="$2"
    LINE="$3"

    SERVICE=$(echo $LINE | cut -d":" -f1)
    PORTS=$(echo $LINE | cut -d":" -f2 | tr ',' '\n')

    if [ "$PORTS" == "" ]; then
        echo ""
        exit 0
    fi

    for PORT in $PORTS; do
        echo -e "\n$SERVICE [$PORT]:"
        echo -e "  🌐  http://$REMOTE_IP:$PORT"
        echo -e "  🏠  http://$LOCAL_IP:$PORT"
        echo -e "  💻  http://localhost:$PORT"
        echo -e "---"
    done
}

if [ ! -z "$COMMAND_DOCKER_COMPOSE" ]; then
    $DOCKER_COMPOSE $COMMAND_DOCKER_COMPOSE $@;
    exit 0
fi

if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    if [ "$COMMAND_ENVIRONMENT" == "compose" ]; then
        $DOCKER_COMPOSE $@;
        exit 0
    elif [ "$COMMAND_ENVIRONMENT" == "ports" ]; then
        SERVICES=$($DOCKER_COMPOSE ps --status running --services | tr '\n' ' ')
        REMOTE_IP=$(curl -s https://checkip.amazonaws.com/)
        LOCAL_IP=$(hostname -I | cut -d" " -f1)

        if [ -z "$1" ]; then
            echo "Usage: doravel ports [list|show|shuffle]"
            exit 0
        fi

        if [ "$1" == "list" ]; then
            LINES=$(echo $(docker_ports) | tr ' ' '\n')

            for LINE in $LINES; do
                docker_print_ports "$REMOTE_IP" "$LOCAL_IP" "$LINE"
            done
            exit 0
        elif [ "$1" == "shuffle" ]; then
            if [ $DORAVEL_CONTAINER -eq 1 ]; then
                shuffle-ports --env $ENV_NAME
            else
                docker run --rm -it -v .:/var/www $DORAVEL_IMAGE shuffle-ports --env $ENV_NAME
            fi
            exit 0
        elif [ "$1" == "show" ]; then
            shift 1
            ARGUMENTS=$(echo "$@" | sed 's/^ +| +$//' | tr ' ' '\n')
            if [ -z "$ARGUMENTS" ]; then
                echo "No services provided"
                exit 1
            fi
            for SERVICE in $ARGUMENTS; do
                LINE=$(docker_find_ports "$SERVICE")
                if [ -z "$LINE" ]; then
                    continue
                fi
                docker_print_ports "$REMOTE_IP" "$LOCAL_IP" "$LINE"
            done
            exit 0
        else
            echo "Service $1 not found"
            exit 1
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "reload" ]; then
        supervisorctl_exec reload
        supervisorctl_exec restart all
        exit $?
    elif [ "$COMMAND_ENVIRONMENT" == "supervisorctl" ]; then
        supervisorctl_exec $@
        exit $?
    elif [[ " ${COMMANDS_ARTISAN[@]} " =~ " $COMMAND_ENVIRONMENT " ]]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            artisan $COMMAND_ENVIRONMENT $@
        else
            container_exec artisan $COMMAND_ENVIRONMENT $@
        fi
        exit 0
    elif [[ " ${COMMANDS_BIN[@]} " =~ " $COMMAND_ENVIRONMENT " ]]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            $COMMAND_ENVIRONMENT $@
        else
            container_exec $COMMAND_ENVIRONMENT $@
        fi
        exit 0
    elif [ "$COMMAND_ENVIRONMENT" == "timestamp" ]; then
        TIMESPAMP=$(date -u +%Y-%m-%d\T%H:%M:%S)
        sed -i "s/DOCKER_IMAGE_UPDATED_AT=.*/DOCKER_IMAGE_UPDATED_AT=$TIMESPAMP/" $ENV_FILE
        echo "Timestamp set to $ENV_FILE 😃"
        exit 0
    fi
fi
