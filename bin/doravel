#!/bin/bash
# --------------------------------------- #
# ❌ DO NOT EDIT ANYTHING FROM HERE ON ❌ #
# --------------------------------------- #
trap 'exit' INT TERM QUIT

DORAVEL_ID="byancode"
DORAVEL_VERSION="1.0.0"
DORAVEL_ISOLATED=${DORAVEL_ISOLATED:-0}
DORAVEL_CONTAINER=${DORAVEL_CONTAINER:-0}
DORAVEL_INSTALLED=${DORAVEL_INSTALLED:-0}

if [ $(id -u) -ne 0 ] && [ $DORAVEL_CONTAINER -eq 0 ]; then
    DEFAULT_SOCK_FILE="/run/user/$(id -u)/docker.sock"
else
    DEFAULT_SOCK_FILE="/var/run/docker.sock"
fi

if [ -x "$(command -v hostname)" ] && [ -z "$NETWORK_IP" ]; then
    DEFAULT_NETWORK_IP=$(hostname -I | awk '{print $1}')
else
    DEFAULT_NETWORK_IP="0.0.0.0"
fi

export DOCKER_SOCK_FILE=${DOCKER_SOCK_FILE:-$DEFAULT_SOCK_FILE}
export NETWORK_IP=${NETWORK_IP:-$DEFAULT_NETWORK_IP}

function print_help {
    echo '
DORAVEL COMMANDS:

Usage: doravel COMMAND [OPTIONS]

Commands:
    x                  Ejecuta un comando en una imagen aislada de doravel
    sh, ash, bash      Abre la terminal de doravel
    fix                Corrige los permisos de los archivos
    php                Ejecuta un comando php en el contenedor de doravel
    npm                Ejecuta un comando npm en el contenedor de doravel
    node               Ejecuta un comando node en el contenedor de doravel
    test               Inicia el entorno de pruebas
    debug              Inicia el entorno de desarrollo
    deploy             Inicia el entorno de produccion
    tinker             Abre el terminal tinker de laravel
    compose            Ejecuta un comando docker compose
    artisan            Ejecuta un comando artisan
    composer           Ejecuta un comando composer
    supervisorctl      Ejecuta un comando supervisorctl
    timestamp          Estable el timestamp en el archivo .env
    upgrade            Actualiza doravel a la ultima version globalmente
    update             Actualiza doravel a la ultima version en el proyecto

Run "doravel COMMAND --help" for more information on a command.

┌──────────────────────────────────────────────────────────────────────────┐
│ IMPORTANT:  DORAVEL IS A SUPERSET OF DOCKER,                             │
│             YOU CAN USE DOCKER COMPOSE COMMANDS                          │
└──────────────────────────────────────────────────────────────────────────┘
'
}

ENDPOINT="https://raw.githubusercontent.com/byancode/doravel/develop"

if [ "$1" == "" ]; then
    print_help
    exit 0
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    exit 0
fi

IS_SUBCOMMAND=0

ENV_DEFAULT="local"
ENV_NAME="$ENV_DEFAULT"
ENV_FILE=".env"
DOCKER_COMPOSE_NAME="docker-compose"
DOCKER_FILE="Dockerfile"
COMMAND="$1"

IFS=$'\n' read -r -d '' -a COMMANDS_DOCKER_COMPOSE <<< "$(docker compose --help | awk '/^Commands:/ {flag=1; next} /^Options:/ {flag=0} /^Run/ {exit} flag {print $1}')"

COMMANDS_BIN=(
    "artisan" "composer" "node" "npm" "php"
    "bash" "ash" "sh" "htop"
)

COMMANDS_ARTISAN=(
    "tinker" "test" "migrate"
)

COMMANDS_ENVIRONMENT=(
    "${COMMANDS_ARTISAN[@]}"
    "${COMMANDS_BIN[@]}"
    "supervisorctl"
    "timestamp"
    "compose"
    "destroy"
    "reload"
    "doctor"
    "deploy"
    "debug"
    "ports"
    "exec"
    "init"
    "down"
    "run"
    "up"
)

COMMANDS_DORAVEL=(
    "package"
    "upgrade"
    "install"
    "update"
    "logout"
    "login"
    "setup"
    "fix"
    "new"
    "env"
    "x"
)

RESERVED_WORDS=( "test" "init" "debug" "deploy" )

COMMANDS=( "${COMMANDS_DOCKER_COMPOSE[@]}" "${COMMANDS_ENVIRONMENT[@]}" "${COMMANDS_DORAVEL[@]}" )

if [ ! -z "$2" ] && [[ " ${COMMANDS[@]} " =~ " $2 " ]]; then
    if [[ " ${RESERVED_WORDS[@]} " =~ " $1 " ]]; then
        COMMAND="$2"
        ENV_NAME="$1"
        ENV_FILE=".env.$1"
        IS_SUBCOMMAND=1
        shift 2
    elif [[ ! " ${COMMANDS[@]} " =~ " $1 " ]]; then
        COMMAND="$2"
        ENV_NAME="$1"
        ENV_FILE=".env.$1"
        IS_SUBCOMMAND=1
        shift 2
    fi
fi

if [ $IS_SUBCOMMAND -eq 0 ]; then
    shift
fi

if [[ ! " ${COMMANDS[@]} " =~ " $COMMAND " ]]; then
    echo "❌ Command not found"
    exit 1
fi

ENV_NAME=$(sed 's/\*$//g' <<< "$ENV_NAME")
ENV_FILE=$(find . -maxdepth 1 -name "$ENV_FILE" | head -n 1)

if [[ $ENV_NAME == *"*"* ]]; then
    echo "❌ Environment name can't contain *"
    exit 0
fi

if [[ ! $ENV_NAME =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "❌ Environment name not valid"
    exit 0
fi

if [ ! -z "$ENV_FILE" ]; then
    ENV_NAME=$(echo $(basename $ENV_FILE) | sed 's/\.env//g' | sed 's/^\.//g')
    if [ -z "$ENV_NAME" ]; then
        ENV_NAME="$ENV_DEFAULT"
        DOCKER_FILE="Dockerfile"
        DOCKER_COMPOSE_NAME="docker-compose"
    else
        DOCKER_FILE="Dockerfile.$ENV_NAME"
        DOCKER_COMPOSE_NAME="docker-compose.$ENV_NAME"
    fi
elif [ "$ENV_NAME" != "$ENV_DEFAULT" ]; then
    ENV_FILE=".env.$ENV_NAME"
    DOCKER_FILE="Dockerfile.$ENV_NAME"
    DOCKER_COMPOSE_NAME="docker-compose.$ENV_NAME"
else
    ENV_FILE=".env"
    DOCKER_FILE="Dockerfile"
    DOCKER_COMPOSE_NAME="docker-compose"
fi

DOCKER_COMPOSE_FILE=$(find . -maxdepth 1 -name "$DOCKER_COMPOSE_NAME.y*" | head -n 1)
COMMAND_DOCKER_COMPOSE=$(echo " ${COMMANDS_DOCKER_COMPOSE[@]} " | grep -o " $COMMAND " | xargs)
COMMAND_ENVIRONMENT=$(echo " ${COMMANDS_ENVIRONMENT[@]} " | grep -o " $COMMAND " | xargs)
COMMAND_DORAVEL=$(echo " ${COMMANDS_DORAVEL[@]} " | grep -o " $COMMAND " | xargs)
DORAVEL_IMAGE="byancode/doravel:$DORAVEL_VERSION"

# echo "Command: $COMMAND"
# echo "Environment: $ENV_NAME"

if [ ! -z "$COMMAND_DORAVEL" ] && [ $IS_SUBCOMMAND -eq 1 ]; then
    echo "❌ Command not found"
    exit 1
fi

if [ ! -z "$COMMAND_DORAVEL" ]; then
    # echo "Command doravel: $COMMAND_DORAVEL"
    if [ "$COMMAND_DORAVEL" == 'x' ]; then
        WORKDIR="/var/www"
        ARGS=()

        while [[ $# -gt 0 ]]; do
            case "$1" in
                --env)
                    ENV_NAME=$2
                    shift 2
                    ;;
                -w|--workdir)
                    WORKDIR="$2"
                    shift 2
                    ;;
                *)
                    ARGS+=("$1")
                    shift
                    ;;
            esac
        done

        VOLUMES=(
            "-v .:$WORKDIR"
            "-v $DOCKER_SOCK_FILE:/var/run/docker.sock"
        )

        docker run --rm -it \
            ${VOLUMES[@]} \
            -w "$WORKDIR" \
            -e "APP_ENV=$ENV_NAME" \
            -e "DORAVEL_ISOLATED=1" \
            -e "DORAVEL_CONTAINER=1" \
            -e "NETWORK_IP=$NETWORK_IP" \
            -e "DOCKER_SOCK_FILE=$DOCKER_SOCK_FILE" \
            $DORAVEL_IMAGE \
            ${ARGS[@]}
        exit $?
    elif [ "$COMMAND_DORAVEL" == 'fix' ]; then
        if [ -d "./bootstrap" ]; then
            sudo chown -R $(id -un):$(id -gn) ./bootstrap/cache
        fi
        if [ -d "./storage" ]; then
            sudo chown -R $(id -un):$(id -gn) ./storage
        fi
        if [ -d "./bootstrap" ] || [ -d "./storage" ]; then
            echo "Permissions fixed 😃"
        else
            echo "No bootstrap or storage directories found"
        fi
        exit 0
    elif [ "$COMMAND_DORAVEL" == 'setup' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/setup
            exit $?
        else
            doravel x doravel setup
            if [ $? -eq 0 ]; then
                doravel install
                exit $?
            else
                exit 1
            fi
        fi
    elif [ "$COMMAND_DORAVEL" == 'new' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/new $@
            exit $?
        else
            DIRECTORY=$1
            shift 1
            doravel x --workdir /app doravel new $DIRECTORY
            if [ $? -eq 0 ]; then
                cd "$DIRECTORY"
                doravel setup
                if [ $? -eq 0 ]; then
                    doravel x /usr/doravel/bin/finally "$DIRECTORY"
                    exit $?
                else
                    exit 1
                fi
            else
                exit 1
            fi
        fi
    elif [ "$COMMAND_DORAVEL" == 'env' ]; then
        echo '# Environment variables for doravel
export DORAVEL_CONTAINER=0
if [ $UID -ne 0 ]; then
    export DOCKER_SOCK_FILE="/run/user/$UID/docker.sock"
else
    export DOCKER_SOCK_FILE="/var/run/docker.sock"
fi
alias d="doravel"'
        exit 0
    elif [ "$COMMAND_DORAVEL" == 'install' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/install $@
            exit $?
        else
            doravel x /usr/doravel/bin/builder && \
            doravel compose run --rm app doravel install $@
            exit $?
        fi
    fi
fi

if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    # echo "Command environment"

    if [ "$COMMAND_ENVIRONMENT" == 'init' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/init $ENV_NAME
            exit $?
        else
            doravel x doravel $ENV_NAME init
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "destroy" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/destroy $ENV_NAME $@
            exit $?
        else
            doravel x doravel $ENV_NAME destroy $@
            exit $?
        fi
    fi
fi

if [ ! -f "$ENV_FILE" ]; then
    echo "❌ the $ENV_FILE file does not exist"
    exit 10
fi

if [ -z "$DOCKER_COMPOSE_FILE" ]; then
    echo "❌ the $DOCKER_COMPOSE_FILE file does not exist"
    exit 1
fi

DOCKER_COMPOSE="docker compose --project-name $ENV_NAME --env-file $ENV_FILE --file $DOCKER_COMPOSE_FILE"

service_is_running() {
    $DOCKER_COMPOSE ps --services --status running | grep -q "$1"
    return $?
}

container_exec() {
    RUNNING=$(service_is_running "app" && echo 0 || echo 1)
    if [ $RUNNING -eq 1 ]; then
        echo "❌ Service 'app' is not running"
        exit 1
    else
        $DOCKER_COMPOSE exec -it app $@
        exit $?
    fi
}


if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    if [ "$COMMAND_ENVIRONMENT" == "compose" ]; then
        $DOCKER_COMPOSE $@;
        exit 0
    elif [ "$COMMAND_ENVIRONMENT" == "ports" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/ports --env "$ENV_NAME" $@
            exit $?
        else
            RUNNING=$(service_is_running "app" && echo 0 || echo 1)
            if [ $RUNNING -eq 1 ]; then
                doravel $ENV_NAME compose run --rm app doravel $ENV_NAME ports $@
                exit $?
            else
                doravel $ENV_NAME exec doravel $ENV_NAME ports $@
                exit $?
            fi
        fi
    elif [ "$COMMAND_ENVIRONMENT" == 'doctor' ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/doctor
            exit $?
        else
            container_exec doravel $ENV_NAME doctor
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "reload" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            /usr/doravel/bin/reload
            exit $?
        else
            container_exec doravel $ENV_NAME reload
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "exec" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            $@
            exit $?
        else
            container_exec $@
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "up" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            gum log --time rfc822 --level error "Command not available inside doravel container"
            exit 1
        else
            $DOCKER_COMPOSE up $@
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "run" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            gum log --time rfc822 --level error "Command not available inside doravel container"
            exit 1
        else
            $DOCKER_COMPOSE run $@
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "down" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ] && [ "$ENV_NAME" == "$APP_ENV" ]; then
            gum log --time rfc822 --level error "You can't use 'doravel $ENV_NAME down' in the same environment"
            exit 1
        else
            $DOCKER_COMPOSE down $@
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "supervisorctl" ]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            supervisorctl $@
            exit $?
        else
            container_exec supervisorctl $@
            exit $?
        fi
    elif [[ " ${COMMANDS_ARTISAN[@]} " =~ " $COMMAND_ENVIRONMENT " ]]; then
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            artisan $COMMAND_ENVIRONMENT $@
            exit $?
        else
            container_exec artisan $COMMAND_ENVIRONMENT $@
            exit $?
        fi
    elif [[ " ${COMMANDS_BIN[@]} " =~ " $COMMAND_ENVIRONMENT " ]]; then
        RUNNING=$(service_is_running "app" && echo 0 || echo 1)
        if [ $DORAVEL_CONTAINER -eq 1 ]; then
            $COMMAND_ENVIRONMENT $@
            exit $?
        elif [ $RUNNING -eq 0 ]; then
            container_exec $COMMAND_ENVIRONMENT $@
            exit $?
        else
            $DOCKER_COMPOSE run \
            --workdir "/var/www" \
            --env "APP_ENV=$ENV_NAME" \
            --env "DORAVEL_ISOLATED=1" \
            --env "DORAVEL_CONTAINER=1" \
            --env "NETWORK_IP=$NETWORK_IP" \
            --env "DOCKER_SOCK_FILE=$DOCKER_SOCK_FILE" \
            --rm -it app \
            $COMMAND_ENVIRONMENT $@
            exit $?
        fi
    elif [ "$COMMAND_ENVIRONMENT" == "timestamp" ]; then
        TIMESPAMP=$(date -u +%Y-%m-%d\T%H:%M:%S)
        sed -i "s/DOCKER_IMAGE_UPDATED_AT=.*/DOCKER_IMAGE_UPDATED_AT=$TIMESPAMP/" $ENV_FILE
        echo "Timestamp set to $ENV_FILE 😃"
        exit 0
    fi
fi

if [ ! -z "$COMMAND_DOCKER_COMPOSE" ]; then
    $DOCKER_COMPOSE $COMMAND_DOCKER_COMPOSE $@
    exit $?
fi