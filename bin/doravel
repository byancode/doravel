#!/bin/bash

function print_help {
    echo 'Modo de uso: doravel [COMMAND] [OPTIONS]

COMMAND:
    init      Inicia un proyecto con doravel
    start     Restablece todos los servicios
    up        Iniciar los servicios del proyecto
    stop      Pausa todos los servicios
    down      Para y eliminar los servicios
    restart   Reiniciar los servicios
    reload    Recarrega los servicios
    console   Abre el terminal bash de doravel
    terminal  Abre el terminal bash de doravel
    artisan   Ejecuta un comando artisan
    fix       Corrige el usuario y grupo

OPTIONS:
    -e | --env     .env file to use
    -h | --help    show this help
    -v | --version show version

'
}

if [ "$1" == "" ]; then
    print_help
    exit 0
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    exit 0
fi

if [ ! -d "./app" ] || [ ! -f "./.env" ]; then
    echo "the current directory is not a laravel project"
    exit 0
fi

if [ "$1" == "init" ]; then
    echo "Initializing doravel..."
    read -p "Do you want to initialize doravel? [y/N] " RESPOSE

    if [ "$RESPOSE" == "y" ]; then
        bash <(curl https://raw.githubusercontent.com/byancode/doravel/main/bin/init)
    fi

    exit 0
fi

# compobamos si exite el comando

if [ "$1" != "init" ] && [ "$1" != "start" ] && [ "$1" != "up" ] && [ "$1" != "stop" ] && [ "$1" != "down" ] && [ "$1" != "restart" ] && [ "$1" != "reload" ] && [ "$1" != "console" ] && [ "$1" != "terminal" ] && [ "$1" != "artisan" ] && [ "$1" != "fix" ]; then
    echo "the command $1 is not valid"
    exit 0
fi

# comandos que no requiere de un .env

if [ "$1" == "fix" ]; then
    chown -R $(id -un):$(id -gn) ./storage
    chown -R $(id -un):$(id -gn) ./bootstrap/cache

    exit 0
fi

# comandos que requieren de un .env

ENV_FILE=".env"
ENV_NAME="local"
DCP_NAME="docker-compose"

if [ ! -f "$DCP_NAME.yml" ]; then
    echo "this project does not have a docker-compose.yml file"
    exit 1
fi

if [ "$2" == "-e" ] || [ "$2" == "--env" ]; then
    ENV_NAME="$3"
fi

if [ "$ENV_NAME" == "" ]; then
    ENV_NAME="local"
fi

if ! [[ "$ENV_NAME" =~ ^[a-zA-Z0-9]+$ ]]; then
    echo "the environment name $ENV_NAME is not valid"
    exit 0
fi

ARGUMENTS="--file=$DCP_NAME.yml"

if [ "$ENV_NAME" != "" ]; then
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "testing" ] && [ ! -f "./$ENV_FILE" ] && [ -f "./.env.test" ]; then
    ENV_NAME="test"
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "production" ] && [ ! -f "./$ENV_FILE" ] && [ -f "./.env.prod" ]; then
    ENV_NAME="prod"
    ENV_FILE=".env.$ENV_NAME"
    DCP_NAME="docker-compose.$ENV_NAME"
fi

if [ "$ENV_NAME" == "prod" ] || [ "$ENV_NAME" == "production" ]; then
    if [ ! -f "./$ENV_FILE" ]; then
        ENV_NAME="local"
        ENV_FILE=".env.$ENV_NAME"
        DCP_NAME="docker-compose.$ENV_NAME"
    fi
fi

if [ "$ENV_NAME" != "local" ] && [ ! -f "./$ENV_FILE" ]; then
    echo "the environment file $ENV_FILE does not exist"
    exit 0
fi

if [ "$ENV_NAME" != "local" ] && [ ! -f "./$ENV_FILE" ]; then
    echo "the environment file $ENV_FILE does not exist"
    exit 0
fi

if [ ! -f "./$ENV_FILE" ]; then
    ENV_NAME="local"
    ENV_FILE=".env"
fi

if [ -f "./$DCP_NAME.yml" ]; then
    ARGUMENTS="$ARGUMENTS --file=$DCP_NAME.yml"
fi

# get name from this current directory
DIR_NAME=$(basename $(pwd))
PROJECT_NAME=$(echo $DIR_NAME | sed 's/[^a-zA-Z0-9]/-/g')
PROJECT_NAME="${PROJECT_NAME}__${ENV_NAME}"
ARGUMENTS="$ARGUMENTS --project-name=$PROJECT_NAME --env-file=$ENV_FILE"

if [ "$1" == "console" ] || [ "$1" == "terminal" ]; then
    docker-compose $(echo $ARGUMENTS) exec -- doravel bash
fi

if [ "$1" == "artisan" ]; then
    docker-compose $(echo $ARGUMENTS) exec -- doravel php artisan ${@:3}
fi

if [ "$1" == "up" ]; then
    docker-compose $(echo $ARGUMENTS) up ${@:3}
fi

if [ "$1" == "start" ]; then
    docker-compose $(echo $ARGUMENTS) start
fi

if [ "$1" == "restart" ] || [ "$1" == "reload" ]; then
    docker-compose $(echo $ARGUMENTS) restart -- doravel
fi

if [ "$1" == "down" ]; then
    docker-compose $(echo $ARGUMENTS) down ${@:3}
fi

if [ "$1" == "stop" ]; then
    docker-compose $(echo $ARGUMENTS) stop
fi
