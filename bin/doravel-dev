#!/bin/bash

function print_help {
    echo '
DORAVEL COMMANDS:

Usage: doravel COMMAND [OPTIONS]

Commands:
    x                  Ejecuta un comando en una imagen aislada de doravel
    sh, ash, bash      Abre la terminal de doravel
    fix                Corrige los permisos de los archivos
    php                Ejecuta un comando php en el contenedor de laravel
    node               Ejecuta un comando node en el contenedor de laravel
    npm                Ejecuta un comando npm en el contenedor de laravel
    test               Inicia el entorno de pruebas
    seed               Ejecuta los seeders de la base de datos
    debug              Inicia el entorno de desarrollo
    deploy             Inicia el entorno de produccion
    tinker             Abre el terminal tinker de laravel
    migrate            Ejecuta las migraciones de la base de datos
    project            Muestra la informacion del proyecto
    artisan            Ejecuta un comando artisan
    composer           Ejecuta un comando composer
    rollback           Revierte las migraciones de la base de datos
    supervisor         Ejecuta un comando supervisorctl
    timestamp          Estable el timestamp en el archivo .env
    upgrade            Actualiza doravel a la ultima version globalmente
    update             Actualiza doravel a la ultima version en el proyecto

Run "doravel COMMAND --help" for more information on a command.

--------------------------------------------

DOCKER COMPOSE COMMANDS:
    '"$(docker compose --help)"'
'
}

ENDPOINT="https://raw.githubusercontent.com/byancode/doravel/main"

create_slug() {
    echo $1 | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/^-//g' | sed 's/-$//g'
}

write_timestamp() {
    ENV_FILE=$1

    if [ ! -f "./$ENV_FILE" ]; then
        echo "the $ENV_FILE file does not exist"
        exit 0
    fi

    TIMESPAMP=$(date -u +%Y-%m-%d\T%H:%M:%S)
    sed -i "s/DOCKER_IMAGE_UPDATED_AT=.*/DOCKER_IMAGE_UPDATED_AT=$TIMESPAMP/" ./$ENV_FILE
    echo "Timestamp set to $ENV_FILE ðŸ˜ƒ"
}

if [ "$1" == "" ]; then
    print_help
    exit 0
fi

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    print_help
    exit 0
fi

COMMAND="$1"

if [ $COMMAND == "" ]; then
    echo "Running doravel..."
fi

IFS=$'\n' read -r -d '' -a COMMANDS_DOCKER_COMPOSE <<< "$(docker compose --help | awk '/^Commands:/ {flag=1; next} /^Options:/ {flag=0} /^Run/ {exit} flag {print $1}')"

COMMANDS_ENVIRONMENT=(
    "tinker" "test" "migrate" "seed" "rollback"
    "artisan" "composer" "node" "npm" "php"
    "bash" "ash" "sh"
    "supervisor"
    "timestamp"
    "deploy"
    "debug"
    "env"
    "x"
)

COMMANDS_DORAVEL=(
    "compose"
    "package"
    "project"
    "upgrade"
    "update"
)

COMMANDS=( "${COMMANDS_DOCKER_COMPOSE[@]}" "${COMMANDS_ENVIRONMENT[@]}" "${COMMANDS_DORAVEL[@]}" )

if [[ ! " ${COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
    echo "Command not found"
    exit 0
fi

COMMAND_DOCKER_COMPOSE=$(echo "${COMMANDS_DOCKER_COMPOSE[@]}" | grep -o $COMMAND)
COMMAND_ENVIRONMENT=$(echo "${COMMANDS_ENVIRONMENT[@]}" | grep -o $COMMAND)
COMMAND_DORAVEL=$(echo "${COMMANDS_DORAVEL[@]}" | grep -o $COMMAND)

if [ ! -z "$COMMAND_DOCKER_COMPOSE" ]; then
    echo "Command docker-compose"
fi

if [ ! -z "$COMMAND_ENVIRONMENT" ]; then
    echo "Command environment"
fi

if [ ! -z "$COMMAND_DORAVEL" ]; then
    echo "Command doravel"
fi